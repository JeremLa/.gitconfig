[user]
    name = <user name>
    email = <email>
[core]
    autocrlf = input
    editor = vim
[pull]
    rebase = preserve
[push]
    #by default push current branch to a branch with the same name
    default = current
[merge]
    log = true
[alias]
    #pretty logs
    #log all commit
    ls   = log --graph --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    #log all commit no color
    lsnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    #log all with commit's files modified
    ll   = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    #same as ls with date
    lsd  = log --pretty=format:"%C(yellow)%h\\ %Cgreen%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    #same as ls with since date
    lss  = log --pretty=format:"%C(yellow)%h\\ %Cgreen%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    #log diff commit between current branch and branch you add to commande
    # if you create branche from master you can write : git ldb master..
    ldb  = log --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit
    
    #log commit where file as been modified
    flu = log -u
    
    #same as ll but only for last commit
    dl  = "!git ll -1"
    #show diff apply in current commit
    dlc = diff --cached HEAD^
    
    #alias for current command
    cp    = cherry-pick
    cl    = clone
    ci    = commit
    cia   = commit --amend
    co    = checkout
    diff  = diff --word-diff
    dc    = diff --cached
    a     = add
    re    = remote
    rev   = remote --verbose
    b     = branch
    bn    = checkout -b
    rebi  = rebase -i
    rebc  = rebase --continue
    s     = status
    ssb   = status -sb
    
    #alias for quick reset
    r   = reset
    r1  = reset HEAD^
    r2  = reset HEAD^^
    rh  = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard
